const S_BOX: [u8; 0x100] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const INV_S_BOX: [u8; 0x100] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

const R_CON: [u8; 0x10] = [
    0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x8d, 0x9a,
];

mod gf2_8 {
    pub fn mult(x: u8, y: u8) -> u8 {
        let mut r = 0;
        let mut a = x;
        let mut b = y;
        while a > 0 {
            if a & 0x1 == 0x1 {
                r ^= b;
            }
            a >>= 1;
            if b & 0x80 == 0 {
                b <<= 1;
            } else {
                b = (b << 1) ^ 0x1b;
            }
        }
        r
    }
}

mod key_ops {
    use super::R_CON;
    use super::S_BOX;

    fn sub(w: u32) -> u32 {
        ((S_BOX[((w >> 0x18) & 0xff) as usize] as u32) << 0x18)
            | ((S_BOX[((w >> 0x10) & 0xff) as usize] as u32) << 0x10)
            | ((S_BOX[((w >> 0x8) & 0xff) as usize] as u32) << 0x8)
            | (S_BOX[(w & 0xff) as usize] as u32)
    }

    fn rot(w: u32) -> u32 {
        ((w >> 0x18) & 0xff) | (w << 0x8)
    }

    fn rcon(i: usize) -> u32 {
        (R_CON[i] as u32) << 0x18
    }

    pub fn expand(schedule: &mut [u32; 0x2c], key: &[u8; 0x10]) {
        (*schedule)[0] = (key[0] as u32) << 0x18
            | (key[1] as u32) << 0x10
            | (key[2] as u32) << 0x8
            | key[3] as u32;
        (*schedule)[1] = (key[4] as u32) << 0x18
            | (key[5] as u32) << 0x10
            | (key[6] as u32) << 0x8
            | key[7] as u32;
        (*schedule)[2] = (key[8] as u32) << 0x18
            | (key[9] as u32) << 0x10
            | (key[10] as u32) << 0x8
            | key[11] as u32;
        (*schedule)[3] = (key[12] as u32) << 0x18
            | (key[13] as u32) << 0x10
            | (key[14] as u32) << 0x8
            | key[15] as u32;
        (4..0x2c).for_each(|i: usize| {
            let temp = match i & 0b11 {
                0 => sub(rot((*schedule)[i - 1])) ^ rcon(i >> 2),
                _ => (*schedule)[i - 1],
            };
            (*schedule)[i] = (*schedule)[i - 4] ^ temp;
        })
    }
}

mod state_ops {
    pub mod common {
        pub fn init(state: &mut [u8; 0x10], bytes: &[u8; 0x10]) {
            for (i, b) in bytes.iter().enumerate() {
                (*state)[i] = *b;
            }
        }

        pub fn add_round_key(state: &mut [u8; 0x10], round: &[u32; 0x4]) {
            round.iter().enumerate().for_each(|(i, b)| {
                (*state)[4 * i] ^= 0xff & (*b >> 0x18) as u8;
                (*state)[4 * i + 1] ^= 0xff & (*b >> 0x10) as u8;
                (*state)[4 * i + 2] ^= 0xff & (*b >> 0x8) as u8;
                (*state)[4 * i + 3] ^= 0xff & *b as u8;
            })
        }
    }

    pub mod encrypt {
        use super::super::gf2_8;
        use super::super::S_BOX;

        pub fn shift(state: &mut [u8; 0x10]) {
            let shifted = [
                state[0], state[5], state[10], state[15], state[4], state[9], state[14], state[3],
                state[8], state[13], state[2], state[7], state[12], state[1], state[6], state[11],
            ];
            state
                .iter_mut()
                .zip(shifted.iter())
                .for_each(|(a, b)| *a = *b)
        }

        pub fn sub(state: &mut [u8; 0x10]) {
            state.iter_mut().for_each(|a| *a = S_BOX[*a as usize])
        }

        pub fn mix(state: &mut [u8; 0x10]) {
            let mut new_state: [u8; 0x10] = [0; 0x10];
            (0..4).for_each(|i| {
                new_state[4 * i] = gf2_8::mult(2, (*state)[4 * i])
                    ^ gf2_8::mult(3, (*state)[4 * i + 1])
                    ^ (*state)[4 * i + 2]
                    ^ (*state)[4 * i + 3];
                new_state[4 * i + 1] = (*state)[4 * i]
                    ^ gf2_8::mult(2, (*state)[4 * i + 1])
                    ^ gf2_8::mult(3, (*state)[4 * i + 2])
                    ^ (*state)[4 * i + 3];
                new_state[4 * i + 2] = (*state)[4 * i]
                    ^ (*state)[4 * i + 1]
                    ^ gf2_8::mult(2, (*state)[4 * i + 2])
                    ^ gf2_8::mult(3, (*state)[4 * i + 3]);
                new_state[4 * i + 3] = gf2_8::mult(3, (*state)[4 * i])
                    ^ (*state)[4 * i + 1]
                    ^ (*state)[4 * i + 2]
                    ^ gf2_8::mult(2, (*state)[4 * i + 3]);
            });
            for (s, n) in state.iter_mut().zip(new_state.iter()) {
                *s = *n
            }
        }
    }

    pub mod decrypt {
        use super::super::gf2_8;
        use super::super::INV_S_BOX;

        pub fn shift(state: &mut [u8; 0x10]) {
            let shifted = [
                state[0], state[13], state[10], state[7], state[4], state[1], state[14], state[11],
                state[8], state[5], state[2], state[15], state[12], state[9], state[6], state[3],
            ];
            state
                .iter_mut()
                .zip(shifted.iter())
                .for_each(|(a, b)| *a = *b)
        }

        pub fn sub(state: &mut [u8; 0x10]) {
            state.iter_mut().for_each(|a| *a = INV_S_BOX[*a as usize])
        }

        pub fn mix(state: &mut [u8; 0x10]) {
            let mut new_state: [u8; 0x10] = [0; 0x10];
            (0..4).for_each(|i| {
                new_state[4 * i] = gf2_8::mult(0xe, (*state)[4 * i])
                    ^ gf2_8::mult(0xb, (*state)[4 * i + 1])
                    ^ gf2_8::mult(0xd, (*state)[4 * i + 2])
                    ^ gf2_8::mult(0x9, (*state)[4 * i + 3]);
                new_state[4 * i + 1] = gf2_8::mult(0x9, (*state)[4 * i])
                    ^ gf2_8::mult(0xe, (*state)[4 * i + 1])
                    ^ gf2_8::mult(0xb, (*state)[4 * i + 2])
                    ^ gf2_8::mult(0xd, (*state)[4 * i + 3]);
                new_state[4 * i + 2] = gf2_8::mult(0xd, (*state)[4 * i])
                    ^ gf2_8::mult(0x9, (*state)[4 * i + 1])
                    ^ gf2_8::mult(0xe, (*state)[4 * i + 2])
                    ^ gf2_8::mult(0xb, (*state)[4 * i + 3]);
                new_state[4 * i + 3] = gf2_8::mult(0xb, (*state)[4 * i])
                    ^ gf2_8::mult(0xd, (*state)[4 * i + 1])
                    ^ gf2_8::mult(0x9, (*state)[4 * i + 2])
                    ^ gf2_8::mult(0xe, (*state)[4 * i + 3]);
            });
            for (s, n) in state.iter_mut().zip(new_state.iter()) {
                *s = *n
            }
        }
    }
}

fn decrypt(key_schedule: &[u32; 0x2c], ciphertext: &[u8; 0x10]) -> [u8; 0x10] {
    let mut state = [0; 0x10];
    state_ops::common::init(&mut state, ciphertext);

    state_ops::common::add_round_key(
        &mut state,
        &[
            key_schedule[0x28],
            key_schedule[0x29],
            key_schedule[0x2a],
            key_schedule[0x2b],
        ],
    );

    (1..0xa).rev().for_each(|round| {
        state_ops::decrypt::shift(&mut state);
        state_ops::decrypt::sub(&mut state);
        state_ops::common::add_round_key(
            &mut state,
            &[
                key_schedule[4 * round],
                key_schedule[4 * round + 1],
                key_schedule[4 * round + 2],
                key_schedule[4 * round + 3],
            ],
        );
        state_ops::decrypt::mix(&mut state);
    });

    state_ops::decrypt::shift(&mut state);
    state_ops::decrypt::sub(&mut state);
    state_ops::common::add_round_key(
        &mut state,
        &[
            key_schedule[0],
            key_schedule[1],
            key_schedule[2],
            key_schedule[3],
        ],
    );

    state
}

fn encrypt(key_schedule: &[u32; 0x2c], plaintext: &[u8; 0x10]) -> [u8; 0x10] {
    let mut state = [0; 0x10];
    state_ops::common::init(&mut state, plaintext);

    state_ops::common::add_round_key(
        &mut state,
        &[
            key_schedule[0],
            key_schedule[1],
            key_schedule[2],
            key_schedule[3],
        ],
    );

    (1..0xa).for_each(|round| {
        state_ops::encrypt::sub(&mut state);
        state_ops::encrypt::shift(&mut state);
        state_ops::encrypt::mix(&mut state);
        state_ops::common::add_round_key(
            &mut state,
            &[
                key_schedule[4 * round],
                key_schedule[4 * round + 1],
                key_schedule[4 * round + 2],
                key_schedule[4 * round + 3],
            ],
        );
    });

    state_ops::encrypt::sub(&mut state);
    state_ops::encrypt::shift(&mut state);
    state_ops::common::add_round_key(
        &mut state,
        &[
            key_schedule[0x28],
            key_schedule[0x29],
            key_schedule[0x2a],
            key_schedule[0x2b],
        ],
    );

    state
}

pub fn encrypt_ecb(key: &[u8; 0x10], bytes: &[u8]) -> Result<Vec<u8>, ()> {
    let mut key_schedule: [u32; 0x2c] = [0; 0x2c];
    key_ops::expand(&mut key_schedule, key);

    let mut result: Vec<u8> = Vec::with_capacity(bytes.len());

    let mut chunks = bytes.chunks_exact(0x10);
    for chunk in &mut chunks {
        let mut bytes: [u8; 0x10] = [0; 0x10];
        bytes.copy_from_slice(chunk);
        let ciphertext_chunk = encrypt(&key_schedule, &bytes);
        result.extend(&ciphertext_chunk);
    }
    if !chunks.remainder().is_empty() {
        return Err(());
    }

    Ok(result)
}

pub fn decrypt_ecb(key: &[u8; 0x10], bytes: &[u8]) -> Result<Vec<u8>, ()> {
    let mut key_schedule: [u32; 0x2c] = [0; 0x2c];
    key_ops::expand(&mut key_schedule, key);

    let mut result: Vec<u8> = Vec::with_capacity(bytes.len());

    let mut chunks = bytes.chunks_exact(0x10);
    for chunk in &mut chunks {
        let mut bytes: [u8; 0x10] = [0; 0x10];
        bytes.copy_from_slice(chunk);
        let plaintext_chunk = decrypt(&key_schedule, &bytes);
        result.extend(&plaintext_chunk);
    }
    if !chunks.remainder().is_empty() {
        return Err(());
    }

    Ok(result)
}

#[cfg(test)]
mod tests {
    use super::*;

    mod key_ops_tests {
        use super::key_ops;
        #[test]
        fn test_key_expansion() {
            let mut schedule = [0; 0x2c];
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            key_ops::expand(&mut schedule, &key);
            let expected_schedule = [
                0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c, 0xa0fafe17, 0x88542cb1, 0x23a33939,
                0x2a6c7605, 0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f, 0x3d80477d, 0x4716fe3e,
                0x1e237e44, 0x6d7a883b, 0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00, 0xd4d1c6f8,
                0x7c839d87, 0xcaf2b8bc, 0x11f915bc, 0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd,
                0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f, 0xead27321, 0xb58dbad2, 0x312bf560,
                0x7f8d292f, 0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e, 0xd014f9a8, 0xc9ee2589,
                0xe13f0cc8, 0xb6630ca6,
            ];
            schedule
                .iter()
                .zip(expected_schedule.iter())
                .for_each(|(a, b)| assert_eq!(*a, *b));
        }
    }

    mod state_ops_tests {
        use super::state_ops;
        #[test]
        fn test_sub_state() {
            let mut state: [u8; 0x10] = [
                0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0,
                0xe0, 0xf0,
            ];
            state_ops::encrypt::sub(&mut state);
            let expected_state: [u8; 0x10] = [
                0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70,
                0xe1, 0x8c,
            ];
            assert_eq!(state, expected_state);
            let mut state: [u8; 0x10] = [
                0x7a, 0x9f, 0x10, 0x27, 0x89, 0xd5, 0xf5, 0x0b, 0x2b, 0xef, 0xfd, 0x9f, 0x3d, 0xca,
                0x4e, 0xa7,
            ];
            state_ops::decrypt::sub(&mut state);
            let expected_state: [u8; 0x10] = [
                0xbd, 0x6e, 0x7c, 0x3d, 0xf2, 0xb5, 0x77, 0x9e, 0x0b, 0x61, 0x21, 0x6e, 0x8b, 0x10,
                0xb6, 0x89,
            ];
            assert_eq!(state, expected_state);
        }
        #[test]
        fn test_shift() {
            let mut state: [u8; 0x10] = [
                0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70,
                0xe1, 0x8c,
            ];
            state_ops::encrypt::shift(&mut state);
            let expected_state: [u8; 0x10] = [
                0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca,
                0xd0, 0xe7,
            ];
            assert_eq!(state, expected_state);
            let mut state: [u8; 0x10] = [
                0x7a, 0xd5, 0xfd, 0xa7, 0x89, 0xef, 0x4e, 0x27, 0x2b, 0xca, 0x10, 0x0b, 0x3d, 0x9f,
                0xf5, 0x9f,
            ];
            state_ops::decrypt::shift(&mut state);
            let expected_state: [u8; 0x10] = [
                0x7a, 0x9f, 0x10, 0x27, 0x89, 0xd5, 0xf5, 0x0b, 0x2b, 0xef, 0xfd, 0x9f, 0x3d, 0xca,
                0x4e, 0xa7,
            ];
            assert_eq!(state, expected_state);
        }
        #[test]
        fn test_mix() {
            let mut state: [u8; 0x10] = [
                0x63, 0x53, 0xe0, 0x8c, 0x09, 0x60, 0xe1, 0x04, 0xcd, 0x70, 0xb7, 0x51, 0xba, 0xca,
                0xd0, 0xe7,
            ];
            state_ops::encrypt::mix(&mut state);
            let expected_state: [u8; 0x10] = [
                0x5f, 0x72, 0x64, 0x15, 0x57, 0xf5, 0xbc, 0x92, 0xf7, 0xbe, 0x3b, 0x29, 0x1d, 0xb9,
                0xf9, 0x1a,
            ];
            assert_eq!(state, expected_state);
            let mut state: [u8; 0x10] = [
                0xbd, 0x6e, 0x7c, 0x3d, 0xf2, 0xb5, 0x77, 0x9e, 0x0b, 0x61, 0x21, 0x6e, 0x8b, 0x10,
                0xb6, 0x89,
            ];
            state_ops::decrypt::mix(&mut state);
            let expected_state: [u8; 0x10] = [
                0x47, 0x73, 0xb9, 0x1f, 0xf7, 0x2f, 0x35, 0x43, 0x61, 0xcb, 0x01, 0x8e, 0xa1, 0xe6,
                0xcf, 0x2c,
            ];
            assert_eq!(state, expected_state);
        }
    }

    #[test]
    fn test_encrypt() {
        let key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f,
        ];
        let mut key_schedule: [u32; 0x2c] = [0; 0x2c];
        key_ops::expand(&mut key_schedule, &key);

        let plaintext = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
            0xee, 0xff,
        ];

        let ciphertext = encrypt(&key_schedule, &plaintext);

        let expected_ciphertext: [u8; 16] = [
            0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4,
            0xc5, 0x5a,
        ];

        assert_eq!(ciphertext, expected_ciphertext)
    }

    #[test]
    fn test_decrypt() {
        let key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f,
        ];
        let mut key_schedule: [u32; 0x2c] = [0; 0x2c];
        key_ops::expand(&mut key_schedule, &key);

        let ciphertext: [u8; 16] = [
            0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4,
            0xc5, 0x5a,
        ];

        let plaintext = decrypt(&key_schedule, &ciphertext);

        let expected_plaintext: [u8; 16] = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
            0xee, 0xff,
        ];

        assert_eq!(plaintext, expected_plaintext)
    }
}
